// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: imageRPC.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClient interface {
	DownloadImage(ctx context.Context, opts ...grpc.CallOption) (Image_DownloadImageClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (Image_UploadImageClient, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) DownloadImage(ctx context.Context, opts ...grpc.CallOption) (Image_DownloadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[0], "/pb.Image/DownloadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageDownloadImageClient{stream}
	return x, nil
}

type Image_DownloadImageClient interface {
	Send(*RequestDownloadImage) error
	Recv() (*ResponseDownloadImage, error)
	grpc.ClientStream
}

type imageDownloadImageClient struct {
	grpc.ClientStream
}

func (x *imageDownloadImageClient) Send(m *RequestDownloadImage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageDownloadImageClient) Recv() (*ResponseDownloadImage, error) {
	m := new(ResponseDownloadImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (Image_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[1], "/pb.Image/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadImageClient{stream}
	return x, nil
}

type Image_UploadImageClient interface {
	Send(*RequestUploadImage) error
	Recv() (*ResponseUploadImage, error)
	grpc.ClientStream
}

type imageUploadImageClient struct {
	grpc.ClientStream
}

func (x *imageUploadImageClient) Send(m *RequestUploadImage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadImageClient) Recv() (*ResponseUploadImage, error) {
	m := new(ResponseUploadImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServer is the server API for Image service.
// All implementations must embed UnimplementedImageServer
// for forward compatibility
type ImageServer interface {
	DownloadImage(Image_DownloadImageServer) error
	UploadImage(Image_UploadImageServer) error
	mustEmbedUnimplementedImageServer()
}

// UnimplementedImageServer must be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (UnimplementedImageServer) DownloadImage(Image_DownloadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImageServer) UploadImage(Image_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageServer) mustEmbedUnimplementedImageServer() {}

// UnsafeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServer will
// result in compilation errors.
type UnsafeImageServer interface {
	mustEmbedUnimplementedImageServer()
}

func RegisterImageServer(s grpc.ServiceRegistrar, srv ImageServer) {
	s.RegisterService(&Image_ServiceDesc, srv)
}

func _Image_DownloadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).DownloadImage(&imageDownloadImageServer{stream})
}

type Image_DownloadImageServer interface {
	Send(*ResponseDownloadImage) error
	Recv() (*RequestDownloadImage, error)
	grpc.ServerStream
}

type imageDownloadImageServer struct {
	grpc.ServerStream
}

func (x *imageDownloadImageServer) Send(m *ResponseDownloadImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageDownloadImageServer) Recv() (*RequestDownloadImage, error) {
	m := new(RequestDownloadImage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Image_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).UploadImage(&imageUploadImageServer{stream})
}

type Image_UploadImageServer interface {
	Send(*ResponseUploadImage) error
	Recv() (*RequestUploadImage, error)
	grpc.ServerStream
}

type imageUploadImageServer struct {
	grpc.ServerStream
}

func (x *imageUploadImageServer) Send(m *ResponseUploadImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadImageServer) Recv() (*RequestUploadImage, error) {
	m := new(RequestUploadImage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Image_ServiceDesc is the grpc.ServiceDesc for Image service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Image_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Image",
	HandlerType: (*ImageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadImage",
			Handler:       _Image_DownloadImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _Image_UploadImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "imageRPC.proto",
}
