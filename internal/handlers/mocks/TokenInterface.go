// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/GoProject1/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TokenInterface is an autogenerated mock type for the TokenInterface type
type TokenInterface struct {
	mock.Mock
}

type TokenInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenInterface) EXPECT() *TokenInterface_Expecter {
	return &TokenInterface_Expecter{mock: &_m.Mock}
}

// CreateAuthToken provides a mock function with given fields: id, name, male
func (_m *TokenInterface) CreateAuthToken(id int, name string, male bool) string {
	ret := _m.Called(id, name, male)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int, string, bool) string); ok {
		r0 = rf(id, name, male)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TokenInterface_CreateAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthToken'
type TokenInterface_CreateAuthToken_Call struct {
	*mock.Call
}

// CreateAuthToken is a helper method to define mock.On call
//   - id int
//   - name string
//   - male bool
func (_e *TokenInterface_Expecter) CreateAuthToken(id interface{}, name interface{}, male interface{}) *TokenInterface_CreateAuthToken_Call {
	return &TokenInterface_CreateAuthToken_Call{Call: _e.mock.On("CreateAuthToken", id, name, male)}
}

func (_c *TokenInterface_CreateAuthToken_Call) Run(run func(id int, name string, male bool)) *TokenInterface_CreateAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *TokenInterface_CreateAuthToken_Call) Return(_a0 string) *TokenInterface_CreateAuthToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenInterface_CreateAuthToken_Call) RunAndReturn(run func(int, string, bool) string) *TokenInterface_CreateAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRfToken provides a mock function with given fields: ctx, userID
func (_m *TokenInterface) CreateRfToken(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateRfToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenInterface_CreateRfToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRfToken'
type TokenInterface_CreateRfToken_Call struct {
	*mock.Call
}

// CreateRfToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *TokenInterface_Expecter) CreateRfToken(ctx interface{}, userID interface{}) *TokenInterface_CreateRfToken_Call {
	return &TokenInterface_CreateRfToken_Call{Call: _e.mock.On("CreateRfToken", ctx, userID)}
}

func (_c *TokenInterface_CreateRfToken_Call) Run(run func(ctx context.Context, userID int)) *TokenInterface_CreateRfToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TokenInterface_CreateRfToken_Call) Return(_a0 error) *TokenInterface_CreateRfToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenInterface_CreateRfToken_Call) RunAndReturn(run func(context.Context, int) error) *TokenInterface_CreateRfToken_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TokenInterface) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TokenInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TokenInterface_Expecter) Delete(ctx interface{}, id interface{}) *TokenInterface_Delete_Call {
	return &TokenInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *TokenInterface_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TokenInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TokenInterface_Delete_Call) Return(_a0 error) *TokenInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenInterface_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *TokenInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *TokenInterface) GetByUserID(ctx context.Context, userID int) ([]*model.RefreshToken, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.RefreshToken, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.RefreshToken); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenInterface_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type TokenInterface_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *TokenInterface_Expecter) GetByUserID(ctx interface{}, userID interface{}) *TokenInterface_GetByUserID_Call {
	return &TokenInterface_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *TokenInterface_GetByUserID_Call) Run(run func(ctx context.Context, userID int)) *TokenInterface_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TokenInterface_GetByUserID_Call) Return(_a0 []*model.RefreshToken, _a1 error) *TokenInterface_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenInterface_GetByUserID_Call) RunAndReturn(run func(context.Context, int) ([]*model.RefreshToken, error)) *TokenInterface_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRfTokenTroughID provides a mock function with given fields: receivedHash, id
func (_m *TokenInterface) ValidateRfTokenTroughID(receivedHash string, id uuid.UUID) (bool, error) {
	ret := _m.Called(receivedHash, id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRfTokenTroughID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (bool, error)); ok {
		return rf(receivedHash, id)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = rf(receivedHash, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(receivedHash, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenInterface_ValidateRfTokenTroughID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRfTokenTroughID'
type TokenInterface_ValidateRfTokenTroughID_Call struct {
	*mock.Call
}

// ValidateRfTokenTroughID is a helper method to define mock.On call
//   - receivedHash string
//   - id uuid.UUID
func (_e *TokenInterface_Expecter) ValidateRfTokenTroughID(receivedHash interface{}, id interface{}) *TokenInterface_ValidateRfTokenTroughID_Call {
	return &TokenInterface_ValidateRfTokenTroughID_Call{Call: _e.mock.On("ValidateRfTokenTroughID", receivedHash, id)}
}

func (_c *TokenInterface_ValidateRfTokenTroughID_Call) Run(run func(receivedHash string, id uuid.UUID)) *TokenInterface_ValidateRfTokenTroughID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TokenInterface_ValidateRfTokenTroughID_Call) Return(_a0 bool, _a1 error) *TokenInterface_ValidateRfTokenTroughID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenInterface_ValidateRfTokenTroughID_Call) RunAndReturn(run func(string, uuid.UUID) (bool, error)) *TokenInterface_ValidateRfTokenTroughID_Call {
	_c.Call.Return(run)
	return _c
}

// conductHashing provides a mock function with given fields: id
func (_m *TokenInterface) conductHashing(id uuid.UUID) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for conductHashing")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenInterface_conductHashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'conductHashing'
type TokenInterface_conductHashing_Call struct {
	*mock.Call
}

// conductHashing is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *TokenInterface_Expecter) conductHashing(id interface{}) *TokenInterface_conductHashing_Call {
	return &TokenInterface_conductHashing_Call{Call: _e.mock.On("conductHashing", id)}
}

func (_c *TokenInterface_conductHashing_Call) Run(run func(id uuid.UUID)) *TokenInterface_conductHashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *TokenInterface_conductHashing_Call) Return(_a0 string, _a1 error) *TokenInterface_conductHashing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenInterface_conductHashing_Call) RunAndReturn(run func(uuid.UUID) (string, error)) *TokenInterface_conductHashing_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenInterface creates a new instance of TokenInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenInterface {
	mock := &TokenInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
