// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/GoProject1/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PasswordInterface is an autogenerated mock type for the PasswordInterface type
type PasswordInterface struct {
	mock.Mock
}

type PasswordInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordInterface) EXPECT() *PasswordInterface_Expecter {
	return &PasswordInterface_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: ctx, usr
func (_m *PasswordInterface) Compare(ctx context.Context, usr model.User) (bool, error) {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (bool, error)); ok {
		return rf(ctx, usr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) bool); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordInterface_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type PasswordInterface_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - ctx context.Context
//   - usr model.User
func (_e *PasswordInterface_Expecter) Compare(ctx interface{}, usr interface{}) *PasswordInterface_Compare_Call {
	return &PasswordInterface_Compare_Call{Call: _e.mock.On("Compare", ctx, usr)}
}

func (_c *PasswordInterface_Compare_Call) Run(run func(ctx context.Context, usr model.User)) *PasswordInterface_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *PasswordInterface_Compare_Call) Return(_a0 bool, _a1 error) *PasswordInterface_Compare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordInterface_Compare_Call) RunAndReturn(run func(context.Context, model.User) (bool, error)) *PasswordInterface_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePassword provides a mock function with given fields: ctx, id
func (_m *PasswordInterface) DeletePassword(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordInterface_DeletePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePassword'
type PasswordInterface_DeletePassword_Call struct {
	*mock.Call
}

// DeletePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *PasswordInterface_Expecter) DeletePassword(ctx interface{}, id interface{}) *PasswordInterface_DeletePassword_Call {
	return &PasswordInterface_DeletePassword_Call{Call: _e.mock.On("DeletePassword", ctx, id)}
}

func (_c *PasswordInterface_DeletePassword_Call) Run(run func(ctx context.Context, id int)) *PasswordInterface_DeletePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PasswordInterface_DeletePassword_Call) Return(_a0 error) *PasswordInterface_DeletePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordInterface_DeletePassword_Call) RunAndReturn(run func(context.Context, int) error) *PasswordInterface_DeletePassword_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, usr
func (_m *PasswordInterface) Store(ctx context.Context, usr model.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordInterface_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type PasswordInterface_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - usr model.User
func (_e *PasswordInterface_Expecter) Store(ctx interface{}, usr interface{}) *PasswordInterface_Store_Call {
	return &PasswordInterface_Store_Call{Call: _e.mock.On("Store", ctx, usr)}
}

func (_c *PasswordInterface_Store_Call) Run(run func(ctx context.Context, usr model.User)) *PasswordInterface_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *PasswordInterface_Store_Call) Return(_a0 error) *PasswordInterface_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordInterface_Store_Call) RunAndReturn(run func(context.Context, model.User) error) *PasswordInterface_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordInterface creates a new instance of PasswordInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordInterface {
	mock := &PasswordInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
