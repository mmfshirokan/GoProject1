// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/GoProject1/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MapRepositoryInterface is an autogenerated mock type for the MapRepositoryInterface type
type MapRepositoryInterface[value interface {
	*model.User | []*model.RefreshToken
}] struct {
	mock.Mock
}

type MapRepositoryInterface_Expecter[value interface {
	*model.User | []*model.RefreshToken
}] struct {
	mock *mock.Mock
}

func (_m *MapRepositoryInterface[value]) EXPECT() *MapRepositoryInterface_Expecter[value] {
	return &MapRepositoryInterface_Expecter[value]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *MapRepositoryInterface[value]) Get(ctx context.Context, key string) (value, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (value, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) value); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(value)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapRepositoryInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MapRepositoryInterface_Get_Call[value interface {
	*model.User | []*model.RefreshToken
}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MapRepositoryInterface_Expecter[value]) Get(ctx interface{}, key interface{}) *MapRepositoryInterface_Get_Call[value] {
	return &MapRepositoryInterface_Get_Call[value]{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MapRepositoryInterface_Get_Call[value]) Run(run func(ctx context.Context, key string)) *MapRepositoryInterface_Get_Call[value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MapRepositoryInterface_Get_Call[value]) Return(_a0 value, _a1 error) *MapRepositoryInterface_Get_Call[value] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MapRepositoryInterface_Get_Call[value]) RunAndReturn(run func(context.Context, string) (value, error)) *MapRepositoryInterface_Get_Call[value] {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: key
func (_m *MapRepositoryInterface[value]) Remove(key string) {
	_m.Called(key)
}

// MapRepositoryInterface_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MapRepositoryInterface_Remove_Call[value interface {
	*model.User | []*model.RefreshToken
}] struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key string
func (_e *MapRepositoryInterface_Expecter[value]) Remove(key interface{}) *MapRepositoryInterface_Remove_Call[value] {
	return &MapRepositoryInterface_Remove_Call[value]{Call: _e.mock.On("Remove", key)}
}

func (_c *MapRepositoryInterface_Remove_Call[value]) Run(run func(key string)) *MapRepositoryInterface_Remove_Call[value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MapRepositoryInterface_Remove_Call[value]) Return() *MapRepositoryInterface_Remove_Call[value] {
	_c.Call.Return()
	return _c
}

func (_c *MapRepositoryInterface_Remove_Call[value]) RunAndReturn(run func(string)) *MapRepositoryInterface_Remove_Call[value] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, val
func (_m *MapRepositoryInterface[value]) Set(ctx context.Context, key string, val value) {
	_m.Called(ctx, key, val)
}

// MapRepositoryInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MapRepositoryInterface_Set_Call[value interface {
	*model.User | []*model.RefreshToken
}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - val value
func (_e *MapRepositoryInterface_Expecter[value]) Set(ctx interface{}, key interface{}, val interface{}) *MapRepositoryInterface_Set_Call[value] {
	return &MapRepositoryInterface_Set_Call[value]{Call: _e.mock.On("Set", ctx, key, val)}
}

func (_c *MapRepositoryInterface_Set_Call[value]) Run(run func(ctx context.Context, key string, val value)) *MapRepositoryInterface_Set_Call[value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(value))
	})
	return _c
}

func (_c *MapRepositoryInterface_Set_Call[value]) Return() *MapRepositoryInterface_Set_Call[value] {
	_c.Call.Return()
	return _c
}

func (_c *MapRepositoryInterface_Set_Call[value]) RunAndReturn(run func(context.Context, string, value)) *MapRepositoryInterface_Set_Call[value] {
	_c.Call.Return(run)
	return _c
}

// NewMapRepositoryInterface creates a new instance of MapRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMapRepositoryInterface[value interface {
	*model.User | []*model.RefreshToken
}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MapRepositoryInterface[value] {
	mock := &MapRepositoryInterface[value]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
