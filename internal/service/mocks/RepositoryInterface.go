// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/GoProject1/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

type RepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterface) EXPECT() *RepositoryInterface_Expecter {
	return &RepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, usr
func (_m *RepositoryInterface) Create(ctx context.Context, usr model.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - usr model.User
func (_e *RepositoryInterface_Expecter) Create(ctx interface{}, usr interface{}) *RepositoryInterface_Create_Call {
	return &RepositoryInterface_Create_Call{Call: _e.mock.On("Create", ctx, usr)}
}

func (_c *RepositoryInterface_Create_Call) Run(run func(ctx context.Context, usr model.User)) *RepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *RepositoryInterface_Create_Call) Return(_a0 error) *RepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryInterface_Create_Call) RunAndReturn(run func(context.Context, model.User) error) *RepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RepositoryInterface) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *RepositoryInterface_Expecter) Delete(ctx interface{}, id interface{}) *RepositoryInterface_Delete_Call {
	return &RepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *RepositoryInterface_Delete_Call) Run(run func(ctx context.Context, id int)) *RepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *RepositoryInterface_Delete_Call) Return(_a0 error) *RepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryInterface_Delete_Call) RunAndReturn(run func(context.Context, int) error) *RepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetTroughID provides a mock function with given fields: ctx, id
func (_m *RepositoryInterface) GetTroughID(ctx context.Context, id int) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTroughID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetTroughID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTroughID'
type RepositoryInterface_GetTroughID_Call struct {
	*mock.Call
}

// GetTroughID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *RepositoryInterface_Expecter) GetTroughID(ctx interface{}, id interface{}) *RepositoryInterface_GetTroughID_Call {
	return &RepositoryInterface_GetTroughID_Call{Call: _e.mock.On("GetTroughID", ctx, id)}
}

func (_c *RepositoryInterface_GetTroughID_Call) Run(run func(ctx context.Context, id int)) *RepositoryInterface_GetTroughID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *RepositoryInterface_GetTroughID_Call) Return(_a0 *model.User, _a1 error) *RepositoryInterface_GetTroughID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetTroughID_Call) RunAndReturn(run func(context.Context, int) (*model.User, error)) *RepositoryInterface_GetTroughID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, usr
func (_m *RepositoryInterface) Update(ctx context.Context, usr model.User) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - usr model.User
func (_e *RepositoryInterface_Expecter) Update(ctx interface{}, usr interface{}) *RepositoryInterface_Update_Call {
	return &RepositoryInterface_Update_Call{Call: _e.mock.On("Update", ctx, usr)}
}

func (_c *RepositoryInterface_Update_Call) Run(run func(ctx context.Context, usr model.User)) *RepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *RepositoryInterface_Update_Call) Return(_a0 error) *RepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryInterface_Update_Call) RunAndReturn(run func(context.Context, model.User) error) *RepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
